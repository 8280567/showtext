#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\family sans
\series bold
showtext: Using System Fonts in R Graphics
\end_layout

\begin_layout Author
Yixuan Qiu
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<setup, include=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(knitr)
\end_layout

\begin_layout Plain Layout

knitr::opts_chunk$set(warning=FALSE, fig.width=7, fig.height=4, fig.align='center',
 out.width='0.8
\backslash

\backslash
textwidth')
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Section
Existing methods to use fonts
\end_layout

\begin_layout Subsection
Built-in graphics devices in R
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:built-in"

\end_inset


\end_layout

\begin_layout Standard
It's possible to let R's built-in graphics devices, e.g., PNG and PDF, to
 use installed fonts in the system.
 However, the implementation is quite configuration dependent.
 If support for Cairo graphics
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://cairographics.org/
\end_layout

\end_inset


\end_layout

\end_inset

 has been compiled in R, then it's quite straightforward to use system fonts
 in the plots, for which one only needs to specify the family name of font
 as is displayed in the system.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:builtin_with_cairo"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

bg = ggplot(NULL, aes(x = 1, y = 1)) + ylim(0.8, 1.2) +
\end_layout

\begin_layout Plain Layout

    theme(axis.title = element_blank(), axis.ticks = element_blank(),
\end_layout

\begin_layout Plain Layout

          axis.text = element_blank())
\end_layout

\begin_layout Plain Layout

if(capabilities("cairo")) {
\end_layout

\begin_layout Plain Layout

    png("builtin-1.png", 672, 384, type = "cairo", res = 96)
\end_layout

\begin_layout Plain Layout

    txt1 = annotate("text", 1, 1, label = "DejaVu Sans Mono",
\end_layout

\begin_layout Plain Layout

                    family = "DejaVu Sans Mono", size = 15)
\end_layout

\begin_layout Plain Layout

    print(bg + txt1)
\end_layout

\begin_layout Plain Layout

    dev.off()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    cairo_pdf("builtin-2.pdf", 7, 4)
\end_layout

\begin_layout Plain Layout

    txt2 = annotate("text", 1, 1, label = "DejaVu Serif Italic",
\end_layout

\begin_layout Plain Layout

                    family = "DejaVu Serif", fontface = "italic", size =
 15)
\end_layout

\begin_layout Plain Layout

    print(bg + txt2)
\end_layout

\begin_layout Plain Layout

    dev.off()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename builtin-1.png
	width 49text%

\end_inset


\begin_inset Graphics
	filename builtin-2.pdf
	width 49text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:builtin_with_cairo"

\end_inset

Specify family name when Cairo graphics is compiled in R.
 
\emph on
Left
\emph default
: PNG graph; 
\emph on
right
\emph default
: PDF graph
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, when Cairo graphics is not available, it will require more effort
 to achieve this target.
 For PNG graphs, the user needs to first register a font family name in
 R which is mapped to a font that is installed in the system, and then specify
 the font family name in plotting functions.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:mapping"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename mapping.pdf
	lyxscale 30
	width 80text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagram to show the font mapping in R
\begin_inset CommandInset label
LatexCommand label
name "fig:mapping"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below is an example to show this procedure on Windows.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:builtin_png_windows"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

if(.Platform$OS.type == "windows") {
\end_layout

\begin_layout Plain Layout

    windowsFonts(comic = "Comic Sans MS")
\end_layout

\begin_layout Plain Layout

    png("builtin-3.png", 672, 384, res = 96)
\end_layout

\begin_layout Plain Layout

    txt3 = annotate("text", 1, 1, label = "Comic Sans MS", family = "comic",
 size = 25)
\end_layout

\begin_layout Plain Layout

    print(bg + txt3)
\end_layout

\begin_layout Plain Layout

    dev.off()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename builtin-3.png
	width 49text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:builtin_png_windows"

\end_inset

Use system fonts for PNG on Windows without Cairo graphics
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that we use function 
\family typewriter
windowsFonts()
\family default
 to register font and create name mapping.
 In other operating systems, there are corresponding functions such as 
\family typewriter
X11Fonts()
\family default
 and 
\family typewriter
quartzFonts()
\family default
 to do the similar job.
\end_layout

\begin_layout Standard
When it comes to PDF graphs, things get even more complicated.
 The first step is similar: one should call 
\family typewriter
pdfFonts()
\family default
 to register new family names in R, and then use them in the plot.
 However, the problem is that 
\family typewriter
pdfFonts()
\family default
 requires the metric files (
\family typewriter
.afm
\family default
) for the font, which are not so common for end users.
 As a contrary, TrueType fonts (
\family typewriter
.ttf
\family default
) and OpenType fonts (mostly 
\family typewriter
.otf
\family default
) are what users most likely to have, but unfortunately, these font formats
 are not directly supported by 
\family typewriter
pdfFonts()
\family default
.
 Additionally, to make the plot have consistent appearance across different
 PDF viewers, it is usually suggested to embed the font within the file
 by calling function 
\family typewriter
embedFonts()
\family default
, which further invokes an external software Ghostscript
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.ghostscript.com/
\end_layout

\end_inset


\end_layout

\end_inset

.
 For the details, interested readers are referred to the R News article
 
\begin_inset CommandInset citation
LatexCommand citet
key "nonstdfonts"

\end_inset

.
\end_layout

\begin_layout Standard
Due to this complexity, when creating PDF graphs most users only select
 the built-in PDF font families, which in R can be queried by the command
 
\family typewriter
names(pdfFonts())
\family default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

names(pdfFonts())
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The Cairo package
\end_layout

\begin_layout Standard
The 
\series bold
Cairo
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citet
key "Cairo"

\end_inset

 provides a number of high-quality graphics devices that are driven by a
 unified backend based on Cairo graphics.
 When the Cairo library is configured with FreeType and Fontcofig support,
 one can make use of the 
\family typewriter
CairoFonts()
\family default
 function to specify the fonts that will be used by all the devices in 
\series bold
Cairo
\series default
.
 Below is an example to show this.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cairo_package"

\end_inset

, left)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(Cairo)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CairoFonts(regular = "Liberation Sans:style=Regular",
\end_layout

\begin_layout Plain Layout

           italic = "Liberation Serif:style=Italic")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CairoPDF("Cairo-1.pdf", 7, 4)
\end_layout

\begin_layout Plain Layout

txt4 = annotate("text", 1, 1.1, label = "Liberation", size = 20)
\end_layout

\begin_layout Plain Layout

txt5 = annotate("text", 1, 0.9, label = "Liberation", fontface = "italic",
 size = 20)
\end_layout

\begin_layout Plain Layout

print(bg + txt4 + txt5)
\end_layout

\begin_layout Plain Layout

dev.off()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
On systems in which FreeType and Fontcofig are not configured with Cairo
 (e.g., Windows), the method to specify fonts with 
\series bold
Cairo
\series default
 package is similar to that of 
\family typewriter
png(type = "cairo")
\family default
 and 
\family typewriter
cairo_pdf()
\family default
.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:cairo_package"

\end_inset

, right)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

if(.Platform$OS.type == "windows") {
\end_layout

\begin_layout Plain Layout

    CairoPDF("Cairo-2.pdf", 7, 4)
\end_layout

\begin_layout Plain Layout

    txt6 = annotate("text", 1, 1.1, label = "On Windows",
\end_layout

\begin_layout Plain Layout

                    family = "Constantia", size = 15)
\end_layout

\begin_layout Plain Layout

    txt7 = annotate("text", 1, 0.9, label = "Lucida Console",
\end_layout

\begin_layout Plain Layout

                    family = "Lucida Console", size = 15)
\end_layout

\begin_layout Plain Layout

    print(bg + txt6 + txt7)
\end_layout

\begin_layout Plain Layout

    dev.off()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename Cairo-1.pdf
	width 49text%

\end_inset


\begin_inset Graphics
	filename Cairo-2.pdf
	width 49text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:cairo_package"

\end_inset

Specify fonts in the 
\series bold
Cairo
\series default
 package.
 
\emph on
Left
\emph default
: with FreeType and Fontcofig support; 
\emph on
right
\emph default
: without (e.g.
 on Windows)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
The extrafont package
\end_layout

\begin_layout Standard

\series bold
extrafont
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "extrafont"

\end_inset

 is an R pakcage mainly used to simplify the usage of system fonts in PDF
 and PostScript graphics.
 It is able to extract metric files (
\family typewriter
.afm
\family default
) from TrueType fonts (
\family typewriter
.ttf
\family default
) so that R PDF device can utilize that information to place text in graphics.
 This procedure is in effect accomplished by the 
\series bold
Rttf2pt1
\series default
 package 
\begin_inset CommandInset citation
LatexCommand citep
key "Rttf2pt1"

\end_inset

 which 
\series bold
extrafont
\series default
 depends on.
 Also, for the same reason described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:built-in"

\end_inset

, 
\series bold
extrafont
\series default
 provides the function 
\family typewriter
embed_fonts()
\family default
 to call Ghostscript to embed fonts in PDF files.
\end_layout

\begin_layout Standard

\series bold
extrafont
\series default
 requires a first-time configuration, during which it will scan TrueType
 fonts installed in the system and generate metric files from them, along
 with other necessary configuration files.
 After that, one needs to further call 
\family typewriter
loadfonts()
\family default
 to register these fonts in R.
 These two steps only need to be done once.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

## Run once
\end_layout

\begin_layout Plain Layout

library(extrafont)
\end_layout

\begin_layout Plain Layout

font_import()
\end_layout

\begin_layout Plain Layout

loadfonts()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After this set-up, the user could query the available font families for
 PDF device by calling functions 
\family typewriter
fonts()
\family default
 or 
\family typewriter
fonttable()
\family default
, and use them in any plotting functions involving font selection.
 Also recall that the final step is to embed the fonts by calling function
 
\family typewriter
embed_fonts()
\family default
.
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:extrafont_package"

\end_inset

)
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(extrafont)
\end_layout

\begin_layout Plain Layout

pdf("extrafont-1-unembedded.pdf", 7, 4)
\end_layout

\begin_layout Plain Layout

txt8 = annotate("text", 1, 1.1, label = "Ubuntu Light",
\end_layout

\begin_layout Plain Layout

                family = "Ubuntu Light", size = 15)
\end_layout

\begin_layout Plain Layout

txt9 = annotate("text", 1, 0.9, label = "Ubuntu Condensed",
\end_layout

\begin_layout Plain Layout

                family = "Ubuntu Condensed", size = 15)
\end_layout

\begin_layout Plain Layout

print(bg + txt8 + txt9)
\end_layout

\begin_layout Plain Layout

dev.off()
\end_layout

\begin_layout Plain Layout

embed_fonts("extrafont-1-unembedded.pdf", outfile = "extrafont-1.pdf")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename extrafont-1.pdf
	width 49text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:extrafont_package"

\end_inset

Use 
\series bold
extrafont
\series default
 package to select fonts in PDF device
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The embedding procedure requires the Ghostscript program to be installed
 in the system and findable to R.
 On Windows, the command below is an example to tell R where it is.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

Sys.setenv(R_GSCMD = "C:/Program Files/gs/gs9.05/bin/gswin32c.exe")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
More details about 
\series bold
extrafont
\series default
 can be found in the README file
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://cran.r-project.org/web/packages/extrafont/README.html
\end_layout

\end_inset


\end_layout

\end_inset

 of this package.
\end_layout

\begin_layout Section
Usage of showtext
\end_layout

\begin_layout Standard
The previous section describes a number of ways to use system fonts in R
 graphics.
 While they could be helpful in many situations when dealing with fonts
 in R, there is still room for seeking more elegant ways to achieve that
 target, among which the 
\series bold
showtext
\series default
 package is one trying to meet such goal.
 There are a number of highlighted features of 
\series bold
showtext
\series default
:
\end_layout

\begin_layout Enumerate

\series bold
Easy for installation
\series default
.
 
\series bold
showtext
\series default
 only requires the lightweight FreeType library
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.freetype.org/
\end_layout

\end_inset


\end_layout

\end_inset

 when being installed, and doesn't rely on any external software.
 This would be helpful when other solutions are not possible, e.g., when R
 is not configured with Cairo support, or the Cairo library is not installed
 in the system.
\end_layout

\begin_layout Enumerate

\series bold
Support for various font formats
\series default
.
 A certain type of font is supported as long as the backend FreeType library
 can read it, usually including TrueType fonts, OpenType fonts, Type 1 fonts,
 etc.
\end_layout

\begin_layout Enumerate

\series bold
Support for various R graphics devices
\series default
.
 Technically 
\series bold
showtext
\series default
 can work on almost any graphics device, whatever in PNG, PDF, SVG or JPEG
 formats, although some of them can achieve higher quality than the others.
\end_layout

\begin_layout Enumerate
It provides 
\series bold
an easy and uniform interface
\series default
 across different operating systems.
 The usage is consistent in Windows, Linux, Mac OS and other Unix-alike
 platforms.
\end_layout

\begin_layout Enumerate
It also features functions to 
\series bold
automatically search and download
\series default
 many beautiful, accessible and open source fonts on the web, and users
 can use these fonts without installing them to the system, thus maintaining
 the fonts for 
\series bold
showtext
\series default
 independently against those in the OS.
\end_layout

\begin_layout Enumerate

\series bold
Intergration with knitr package
\series default
.
\end_layout

\begin_layout Standard
Roughly speaking, 
\series bold
showtext
\series default
 has usage similar to that of 
\series bold
Cairo
\series default
 and 
\series bold
extrafont
\series default
 packages: in the first step one needs to import or register fonts from
 the system, and then use them in the plotting functions.
 This will be described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:register_fonts"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:showtext_functions"

\end_inset

 respectively.
\end_layout

\begin_layout Subsection
Registering fonts
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:register_fonts"

\end_inset


\end_layout

\begin_layout Standard
The actual work of registering fonts is done by the 
\series bold
sysfonts
\series default
 package, which is depended upon by 
\series bold
showtext
\series default
.
 
\series bold
sysfonts
\series default
 provides the function 
\family typewriter
font.add()
\family default
 to register font families for 
\series bold
showtext
\series default
, which has six arguments in total and the first two are mandatory.
 The first parameter, 
\family typewriter
family
\family default
, is the family name that user wants to use in the plotting functions.
 The second one, 
\family typewriter
regular
\family default
, should give the path to the font file for a regular font face.
 Other parameters, such as 
\family typewriter
bold
\family default
 and 
\family typewriter
italic
\family default
, are similar to 
\family typewriter
regular
\family default
, but pointing to the files with corresponding font faces.
 If any of the extra font face parameter is set to 
\family typewriter
NULL
\family default
, then the font file for regular font face will be used.
\end_layout

\begin_layout Standard
Below is an example to download and register the XKCD font for 
\series bold
showtext
\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

library(showtext)
\end_layout

\begin_layout Plain Layout

dest = file.path(tempdir(), "xkcd.ttf")
\end_layout

\begin_layout Plain Layout

download.file("http://simonsoftware.se/other/xkcd.ttf", dest, mode = "wb")
\end_layout

\begin_layout Plain Layout

font.add("myxkcd", regular = dest)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If successful, 
\begin_inset Quotes eld
\end_inset

myxkcd
\begin_inset Quotes erd
\end_inset

 should appear in the result returned by 
\family typewriter
font.families()
\family default
.
 This function lists all font families that are available in 
\series bold
showtext
\series default
, among which 
\begin_inset Quotes eld
\end_inset

sans
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

serif
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

mono
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

wqy
\begin_inset Quotes erd
\end_inset

 are default ones that will be loaded automatically with the package.
\end_layout

\begin_layout Standard
For most operating systems, fonts are usually installed in some standard
 locations, and to add fonts located in these directories, the user can
 provide the filename rather than the whole absolute path to save some typing.
 For example on Windows, sysfonts knows about the standard font directory,
 so we can use the following code to register the Consolas families to 
\series bold
showtext
\series default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<>>=
\end_layout

\begin_layout Plain Layout

if(.Platform$OS.type == "windows") {
\end_layout

\begin_layout Plain Layout

    font.add("consolas", regular = "consola.ttf", bold = "consolab.ttf",
\end_layout

\begin_layout Plain Layout

         italic = "consolai.ttf", bolditalic = "consolaz.ttf")
\end_layout

\begin_layout Plain Layout

    font.families()
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Users can view or set such search paths through function 
\family typewriter
font.paths()
\family default
 (an analog is the 
\family typewriter
.libPaths()
\family default
 function), and list available font files in those paths by calling 
\family typewriter
font.files()
\family default
.
 While it may take some effort to figure out the filename of a font with
 a given family name (and perhaps also font face), the naming convention
 of font files is usually intuitive and fixed.
 Also, some font file viewers can help mapping the font name to its real
 file name in the system.
\end_layout

\begin_layout Standard
To make it even easier, 
\series bold
sysfonts
\series default
 also makes use of the Google Fonts project
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://www.google.com/fonts
\end_layout

\end_inset


\end_layout

\end_inset

 to further simplify the process of downloading and registering fonts available
 on the web.
 Google Fonts hosts more than 600 open source fonts, and is still enriching
 its collection.
 Function 
\family typewriter
font.families.google()
\family default
 lists the presently accessible fonts in the repository, and 
\family typewriter
font.add.google()
\family default
 could search for a specific font family and download font files for all
 possible faces, and then add them to showtext with a user defined family
 name in R.
 These two functions require the 
\series bold
RCurl
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "RCurl"

\end_inset

 and 
\series bold
jsonlite
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "jsonlite"

\end_inset

 packages.
 The following code demonstrates this process.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<message=FALSE>>=
\end_layout

\begin_layout Plain Layout

head(font.families.google(), 10)
\end_layout

\begin_layout Plain Layout

font.add.google("Lato", "lato")
\end_layout

\begin_layout Plain Layout

font.families()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the Lato font has multiple font faces (regular, bold, italic,
 etc.) in Google Fonts repository, and 
\family typewriter
font.add.google()
\family default
 will be aware of this and register all of them in R.
\end_layout

\begin_layout Subsection
showtext functions
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "sub:showtext_functions"

\end_inset


\end_layout

\begin_layout Standard
After registering the fonts, using them in plotting functions will be straightfo
rward.
 However, there is an extra step in 
\series bold
showtext
\series default
 compared with 
\series bold
Cairo
\series default
 or 
\series bold
extrafont
\series default
: user needs to enclose plotting functions where fonts are used by a pair
 of 
\series bold
showtext
\series default
 functions, 
\family typewriter
showtext.begin()
\family default
 and 
\family typewriter
showtext.end()
\family default
.
 Below are two examples, one using 
\series bold
base
\series default
 graphics 
\begin_inset CommandInset citation
LatexCommand citep
key "R"

\end_inset

, and the other using 
\series bold
ggplot2
\series default
 
\begin_inset CommandInset citation
LatexCommand citep
key "ggplot2"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

pdf("showtext-1.pdf", 7, 3)
\end_layout

\begin_layout Plain Layout

showtext.begin()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

set.seed(0)
\end_layout

\begin_layout Plain Layout

p = runif(1)
\end_layout

\begin_layout Plain Layout

op = par(family = "myxkcd", mar = c(0.1, 0.1, 3.1, 1.1))
\end_layout

\begin_layout Plain Layout

pie(c(1 - p, p), cex = 1.2, labels = c("Those who understand
\backslash
nbinary",
\end_layout

\begin_layout Plain Layout

                                       "Those who don't"),
\end_layout

\begin_layout Plain Layout

    col = c("#F8766D", "#00BFC4"), border = NA, radius = 0.9)
\end_layout

\begin_layout Plain Layout

box()
\end_layout

\begin_layout Plain Layout

title("There are 10 types of people in the world",
\end_layout

\begin_layout Plain Layout

      family = "lato", font.main = 4)
\end_layout

\begin_layout Plain Layout

par(op)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

showtext.end()
\end_layout

\begin_layout Plain Layout

dev.off()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<fig.showtext=TRUE, fig.height=3, echo=FALSE, fig.cap='Use 
\backslash

\backslash
textbf{showtext} in PDF device', fig.pos='h'>>=
\end_layout

\begin_layout Plain Layout

set.seed(0)
\end_layout

\begin_layout Plain Layout

p = runif(1)
\end_layout

\begin_layout Plain Layout

op = par(family = "myxkcd", mar = c(0.1, 0.1, 3.1, 1.1))
\end_layout

\begin_layout Plain Layout

pie(c(1 - p, p), cex = 1.2, labels = c("Those who understand
\backslash
nbinary",
\end_layout

\begin_layout Plain Layout

                                       "Those who don't"),
\end_layout

\begin_layout Plain Layout

    col = c("#F8766D", "#00BFC4"), border = NA, radius = 0.9)
\end_layout

\begin_layout Plain Layout

box()
\end_layout

\begin_layout Plain Layout

title("There are 10 types of people in the world",
\end_layout

\begin_layout Plain Layout

      family = "lato", font.main = 4)
\end_layout

\begin_layout Plain Layout

par(op)
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<eval=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(png)
\end_layout

\begin_layout Plain Layout

library(grid)
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

library(Cairo)
\end_layout

\begin_layout Plain Layout

pic = "http://china-r.org/img/China-R-Logo-trans.png"
\end_layout

\begin_layout Plain Layout

dest = file.path(tempdir(), "pic.png")
\end_layout

\begin_layout Plain Layout

download.file(pic, dest, mode = "wb")
\end_layout

\begin_layout Plain Layout

img = readPNG(dest)
\end_layout

\begin_layout Plain Layout

g = rasterGrob(img, interpolate = TRUE)
\end_layout

\begin_layout Plain Layout

unicode = c(27426, 36814, 20851, 27880, 20013, 22269,
\end_layout

\begin_layout Plain Layout

            82, 35821, 35328, 20250, 35758)
\end_layout

\begin_layout Plain Layout

plt = ggplot(NULL, aes(x = 1, y = 1)) + xlim(73, 135) + ylim(17, 54) +
\end_layout

\begin_layout Plain Layout

    annotation_custom(g, xmin = 73, xmax = 135, ymin = 17, ymax = 54) +
\end_layout

\begin_layout Plain Layout

    annotate("text", -Inf, -Inf, label = "http://china-r.org", size = 8,
\end_layout

\begin_layout Plain Layout

             family = "lato", fontface = "italic", hjust = -0.1, vjust =
 -1) +
\end_layout

\begin_layout Plain Layout

    coord_fixed() + ggtitle(intToUtf8(unicode)) +
\end_layout

\begin_layout Plain Layout

    theme_grey(base_size = 20) +
\end_layout

\begin_layout Plain Layout

    theme(axis.title = element_blank(), plot.title = element_text(family =
 "wqy"))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

CairoPNG("showtext-2.png", 840, 480)
\end_layout

\begin_layout Plain Layout

showtext.begin()
\end_layout

\begin_layout Plain Layout

print(plt)
\end_layout

\begin_layout Plain Layout

showtext.end()
\end_layout

\begin_layout Plain Layout

dev.off()
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<dev='CairoPNG', fig.showtext=TRUE, dpi=120, echo=FALSE, fig.cap='Use 
\backslash

\backslash
textbf{showtext} in CairoPNG device', fig.pos='h'>>=
\end_layout

\begin_layout Plain Layout

library(png)
\end_layout

\begin_layout Plain Layout

library(grid)
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

library(Cairo)
\end_layout

\begin_layout Plain Layout

pic = "http://china-r.org/img/China-R-Logo-trans.png"
\end_layout

\begin_layout Plain Layout

dest = file.path(tempdir(), "pic.png")
\end_layout

\begin_layout Plain Layout

download.file(pic, dest, mode = "wb")
\end_layout

\begin_layout Plain Layout

img = readPNG(dest)
\end_layout

\begin_layout Plain Layout

g = rasterGrob(img, interpolate = TRUE)
\end_layout

\begin_layout Plain Layout

unicode = c(27426, 36814, 20851, 27880, 20013, 22269,
\end_layout

\begin_layout Plain Layout

            82, 35821, 35328, 20250, 35758)
\end_layout

\begin_layout Plain Layout

ggplot(NULL, aes(x = 1, y = 1)) + xlim(73, 135) + ylim(17, 54) +
\end_layout

\begin_layout Plain Layout

    annotation_custom(g, xmin = 73, xmax = 135, ymin = 17, ymax = 54) +
\end_layout

\begin_layout Plain Layout

    annotate("text", -Inf, -Inf, label = "http://china-r.org", size = 8,
\end_layout

\begin_layout Plain Layout

             family = "lato", fontface = "italic", hjust = -0.1, vjust =
 -1) +
\end_layout

\begin_layout Plain Layout

    coord_fixed() + ggtitle(intToUtf8(unicode)) +
\end_layout

\begin_layout Plain Layout

    theme_grey(base_size = 20) +
\end_layout

\begin_layout Plain Layout

    theme(axis.title = element_blank(), plot.title = element_text(family =
 "wqy"))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Integration with knitr
\end_layout

\begin_layout Standard

\series bold
knitr
\series default
 is an R package and engine to generate dynamic document with R.
 It's similar to the built-in Sweave engine inside R, but brings in many
 extensions and enhancement.
 Starting from version 1.6.10 (a development version), 
\series bold
knitr
\series default
 begins to have support for 
\series bold
showtext
\series default
 through the option 
\family typewriter
fig.showtext
\family default
.
 Code chunk with this option being 
\family typewriter
TRUE
\family default
 will automatically invoke the 
\family typewriter
showtext.begin()
\family default
 function, so users can write graphics code block just like usual ones,
 given that the font families used in the code have already been registered
 in some code chunk.
 Here is a minimal example of an Rmd file that uses 
\series bold
showtext
\series default
.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
noindent
\end_layout

\end_inset


\begin_inset Box ovalbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

We first do some setup work...
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

```{r setup}
\end_layout

\begin_layout Verbatim

library(knitr)
\end_layout

\begin_layout Verbatim

library(showtext)
\end_layout

\begin_layout Verbatim

opts_chunk$set(dev="CairoPNG", fig.width=7, fig.height=7, dpi=72)
\end_layout

\begin_layout Verbatim

```
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

Then register a font from Google Fonts.
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

```{r fonts, message=FALSE}
\end_layout

\begin_layout Verbatim

font.add.google("Lobster", "lobster")
\end_layout

\begin_layout Verbatim

```
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

Finally we create some fancy plot.
\end_layout

\begin_layout Verbatim

\end_layout

\begin_layout Verbatim

```{r fancy, fig.showtext=TRUE, fig.align='center'}
\end_layout

\begin_layout Verbatim

plot(1, pch = 16, cex = 3)
\end_layout

\begin_layout Verbatim

text(1, 1.1, "A fancy dot", family = "lobster", col = "steelblue", cex =
 3)
\end_layout

\begin_layout Verbatim

```
\end_layout

\begin_layout Verbatim

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that in the setup code chunk, we set the graphics device to 
\family typewriter
CairoPNG()
\family default
, instead of the default 
\family typewriter
png()
\family default
.
 This is the suggested practice, since 
\series bold
Cairo
\series default
 supports anti-alias feature for bitmap devices, and thus being able to
 produce high quality graphs.
 More in-depth reasons are explained in the next section.
\end_layout

\begin_layout Subsection
Limitations and cautions
\end_layout

\begin_layout Section
Design of showtext
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "ref"
options "bibtotoc,jss"

\end_inset


\end_layout

\end_body
\end_document
